{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template for WordPress_Chef: WordPress is web software you can use to create a beautiful website or blog. This template installs a highly available, scalable WordPress deployment using a multi-AZ (Availability Zone) Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy the Chef client and using Chef-client in local mode to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an Elastic Load Balancing load balancer, and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "WPAdmin" : {
      "Default": "wpadmin",
      "Description" : "The WordPress Admin Name",
      "Type": "String"
    },

    "WPAdminPass" : {
      "Default": "wppass1",
      "Description" : "The WordPress Admin Password",
      "Type": "String"
    },

    "WPAdminEmail" : {
      "Default": "kevinmarkley@gmail.com",
      "Description" : "The WordPress Admin Email",
      "Type": "String"
    },

    "AllowHTTP" : {
      "Description" : "The IP address range that can access EC2 instances on Http port 80",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair.",
      "Default": "kmarkley"
    },

    "InstanceType" : {
      "Description" : "Web Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
    ,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
    },

    "DBClass" : {
      "Description" : "Database instance class",
      "Type" : "String",
      "Default" : "db.t2.small",
      "AllowedValues" : [ "db.t1.micro", "db.m1.small", "db.m1.medium", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge", "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.cr1.8xlarge", "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large"]
    ,
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "MultiAZDatabase": {
      "Default": "false",
      "Description" : "Create a multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "WebServerCapacity": {
      "Default": "1",
      "Description" : "The initial number of web server instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription" : "must be between 1 and 5 EC2 instances."
    },

    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (GB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024 GB."
    }
  },

  "Mappings": {


    "AWSRegionArch2AMI": {
      "us-east-1": { "64" : "ami-c481fad3" },
      "us-west-2": { "64": "ami-b04e92d0"  }
    }
  },


  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.100.0.0/16",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "kmarkley-vpc"} ]
      }
    },

    "Subnet" : {
    "Type" : "AWS::EC2::Subnet",
    "Properties" : {
      "VpcId" : { "Ref" : "VPC" },
      "CidrBlock" : "10.100.0.0/24",
      "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
        {"Key" : "Name", "Value" : "kmarkley-sub"} ]
    }
  },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "kmarkley-gateway"} ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "kmarkley-route"} ]
      }
    },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "97.86.129.102/32"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "AllowHTTP"}}],
        "SecurityGroupEgress" : []
      }

    },

    "InstanceSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId": { "Ref": "InstanceSecurityGroup" },
        "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "SourceSecurityGroupId": { "Ref": "InstanceSecurityGroup" }
      }
    },



  "ChefRun": {
    "Type" : "AWS::EC2::Instance",
    "Metadata" : {
      "Comment" : "Installing Chef",
      "AWS::CloudFormation::Init" : {
        "config" : {
          "packages" : {
            "yum" : {
              "git"               : [],
              "subversion"        : []
            }
          }
        }
      }
    },
    "Properties" : {
      "ImageId":  "ami-de347abe" ,
      "InstanceType" : "t2.small",
      "KeyName": "kmarkley",
      "NetworkInterfaces" : [{
        "GroupSet"                 : [{ "Ref" : "InstanceSecurityGroup" }],
        "AssociatePublicIpAddress" : "true",
        "DeviceIndex"              : "0",
        "DeleteOnTermination"      : "true",
        "SubnetId"                 : { "Ref" : "Subnet" }
      }],
      "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
        "#!/bin/bash -xe\n",
        "yum update -y aws-cfn-bootstrap\n",

        "/opt/aws/bin/cfn-init -v ",
        "         --stack ", { "Ref" : "AWS::StackName" },
        "         --resource ChefRun ",
        "         --region ", { "Ref" : "AWS::Region" }, "\n",

        "# Chef install/update.\n",
        "cat <<'EOF' >> /root/1-get_Chef.sh\n",

        "#!/bin/bash\n",
        "CHEF_VERSION=\"12.10.24\"\n",
        "if rpm -qa | grep chef | grep $VERSION; then\n",
        "   exit\n",
        "elif rpm -qa | grep chef | grep -v $CHEF_VERSION; then\n",
        "   rpm -e chef && curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$CHEF_VERSION\" -o chef-install && rpm -Uvh chef-install\n",
        "else\n",
        "   curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$CHEF_VERSION\" -o chef-install && rpm -Uvh chef-install\n",
        "fi\n",
        "EOF\n",
        "chmod 755 /root/1-get_Chef.sh\n",
        "/root/1-get_Chef.sh > /tmp/chef_install.log 2>&1 || error_exit 'Failed to install chef.'\n",

        "# Clone github repo\n",
        "cat <<'EOF' >> /root/2-git-setup.sh\n",

        "#!/bin/bash\n",
        "cd /\n",
        "mkdir -p /etc/chef/\n",
        "cd /etc/chef/\n",
        "git clone https://github.com/kevinmarkley/WP_Site.git\n",
        "EOF\n",
        "chmod 755 /root/2-git-setup.sh\n",
        "/root/2-git-setup.sh > /tmp/git-setup.log 2>&1 || error_exit 'Failed to setup git.'\n",

        "CHEF_SERVER=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`\n",

        "mkdir -p /root/.chef\n",

        "cat > /root/.chef/knife.rb << EOF\n",
        "current_dir = File.dirname(__FILE__)\n",
        "log_level       :info\n",
        "log_location     \"/var/log/chef-client.log\"\n",
        "ssl_verify_mode :verify_none\n",
        "node_name 'kmarkley'\n",
        "client_key \"/root/kmarkley-chef.pem\"\n",
        "validation_client_name  'kmarkley-validator'\n",
        "validation_key          \"/root/kmarkley-validator.pem\"\n",
        "chef_server_url         \"https://$CHEF_SERVER/organizations/kmarkley\"\n",
        "cache_type 'BasicFile'\n",
        "cache_options( :path => \"#{ENV['HOME']}/.chef/checksums\" )\n",
        "cookbook_path            [\"/etc/chef/WP_Site/chef/cookbooks\"]\n",
        "EOF\n",

        "# Node attributes to be seeded during first run\n",
        "cat > /root/roles.json << EOF\n",
        "{\n",
        "   \"run_list\": [\"chef-server-markley\"", "],\n",
        "   \"cloud\": {\n",
        "    \"WPAdmin\": \"", {"Ref" : "WPAdmin"} , "\", \n",
        "    \"WPAdminPass\": \"", {"Ref" : "WPAdminPass"} , "\", \n",
        "    \"region_from_template\": \"", {"Ref" : "AWS::Region"} , "\" \n",
        "  } \n",
        "}\n",
        "EOF\n",


        " # Run chef-client\n",
        "cat <<'EOF' >> /root/3-run-chef.sh\n",
        "#!/bin/bash\n",
        "cd /root\n",
        "chef-client -z -j /root/roles.json\n",
        "EOF\n",
        "chmod 755 /root/3-run-chef.sh\n",
        "/root/3-run-chef.sh > /var/log/chef-client.log 2>&1 || error_exit 'Chef run failed setting up the chef-server.'\n",

        "/opt/aws/bin/cfn-signal -e $? ",
        "         --stack ", { "Ref" : "AWS::StackName" },
        "         --resource ChefRun ",
        "         --region ", { "Ref" : "AWS::Region" }, "\n"


      ]]}}
    },

  "CreationPolicy" : {
    "ResourceSignal" : {
      "Timeout" : "PT15M"
    }
  }
},

  "WordpressRun" : {
    "Type": "AWS::EC2::Instance",
    "Metadata": {
      "Comment": "Installing Chef",
      "AWS::CloudFormation::Init": {
        "config": {
          "packages": {
            "yum": {
              "git": [],
              "subversion": []
            }
          }
        }
      }
    },
    "Properties": {
      "ImageId": "ami-de347abe",
      "InstanceType": "t2.small",
      "KeyName": "kmarkley",
      "NetworkInterfaces": [
        {
          "GroupSet": [
            {
              "Ref": "InstanceSecurityGroup"
            }
          ],
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": {
            "Ref": "Subnet"
          }
        }
      ],
      "UserData": {
        "Fn::Base64": {
          "Fn::Join": [
            "",
            [
              "#!/bin/bash -xe\n",
              "yum update -y aws-cfn-bootstrap\n",
              "/opt/aws/bin/cfn-init -v ",
              "         --stack ",
              {
                "Ref": "AWS::StackName"
              },
              "         --resource WordpressRun ",
              "         --region ",
              {
                "Ref": "AWS::Region"
              },
              "\n",
              "# Chef install/update.\n",
              "cat <<'EOF' >> /root/1-chef-check.sh\n",
              "#!/bin/bash\n",
              "VERSION=\"12.10.24\"\n",
              "if rpm -qa | grep chef | grep $VERSION; then\n",
              "   exit\n",
              "elif rpm -qa | grep chef | grep -v $VERSION; then\n",
              "   rpm -e chef && curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
              "else\n",
              "   curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
              "fi\n",
              "EOF\n",
              "chmod 755 /root/1-chef-check.sh\n",
              "/root/1-chef-check.sh > /tmp/chef_install.log 2>&1 || error_exit 'Failed to install chef.'\n",


              "# Clone github repo\n",
              "cat <<'EOF' >> /root/2-git-setup.sh\n",
              "#!/bin/bash\n",
              "mkdir -p /etc/chef\n",
              "cd /etc/chef\n",
              "git clone https://github.com/kevinmarkley/WP_Site.git\n",
              "EOF\n",
              "chmod 755 /root/2-git-setup.sh\n",
              "/root/2-git-setup.sh > /tmp/git-setup.log 2>&1 || error_exit 'Failed to setup git.'\n",


              "# Create key file\n",
              "cat > /root/.ssh/key.pem << EOF\n",
              "-----BEGIN RSA PRIVATE KEY-----\n",
              "MIIEogIBAAKCAQEAj91RIbNzza99pRTYJGjyLt1y9sLsittYh04FQv/6qqiOcz9KbDJ2wLQzHglX\n",
              "CtZPnkxKVGJyTUQb/71lbh9ApbH8DY9nT7vFTPKRMqw8/9gd6jS6lOcB/IAtYl65VrXqQYqsPDrD\n",
              "EUarYwLQHNEHG0NwX7iGT+lHWaxAdx9flMfd7g/hb20yBDDqIdPUTHcgJcbCRodXgbv51pbuvFOK\n",
              "UA+46JJMieYqP4TK42CIDAsZXRw++u6J6WMrjKtjdb0gvyePgQQHLour0/F06I1Rs399HYaHZoEw\n",
              "lfhYD5+caagXxhfu2CQbxBgTDsJFj3MgxQyOitMHlwBMXVzWdorKIwIDAQABAoIBABrypePeLW71\n",
              "1F87zFDlp5fHu2UllhFcjPSrVKj8MgQNlsFXtaUWvs/R8VFLBpbtFfTc7X9pAWgfve7llz5NdFqV\n",
              "QFV56ywwTADh3vjS8oop/VCFl/2UV/boO5gVjjoD0WF9jE2r5CY0Sp49RKZhMSeWNlJ3yhDl7YuK\n",
              "jHjD06+Wh8jAahDCLFgVQVaYkuesQF5ipHTm5PzfAX8zsGQsTsABSdpe0OkBApAAiuyo9hCC23s/\n",
              "EYTveejmdXKWTqETlCb0m86XZ2+bXEbEF5MHvDc0XBYyIly/sb4iVbPkJjWjVKLTEW06Pyx7iTDh\n",
              "PcQUSmuiUVHYoaNKwx4hWzNiO0ECgYEA4jnP/CNYI5OHpX91rfr/YsOKZGYABF8fh0hsx23v9pU0\n",
              "of8Z2FlsH55JfFe5MLQ0tSDuDzYOHIlkUu8RrIVxVlvoQ/SCLx+xe49x9IPt+if+A1J67dtZpq9J\n",
              "aM21V8STrkqKp0QxWJx1MWny1C7BY+Xy585j9hsmlh1I7f6jI2kCgYEAosyE54ZiW+Kn52EuUlsp\n",
              "VDniOC7eXtFy24dMx3cqCxcHQrY9aUQKBkVpH7mIwSpwyt/0MoWLSOo0xD2YWsc1vlK3GsSUEc06\n",
              "3mSwQBk618aNKynCGYZwuZOEZX5E0BO9MjeTMmJoHlqL0vRA/6fjO+ntwVeLcKli9mCu3XEzq6sC\n",
              "gYA+IWCUv+RCCQ+VDVd1i9y99DQ69KSGjtVq4yI092WTFFFbOGORvqVqXZ+TDcinrqZXJI8dEFx5\n",
              "y+YIvO3estt4u08j8rAaXxrwc2n5nI4sSPWDVhC66KZLmBKSPQTT8QIaORCxdZIT4wxwoMd3LMwi\n",
              "MpIuxclAWx6S1cIk0u1dGQKBgCdzvLmG3Ys68EmoSVt38BoTNPk8knMT+uusbDTicfPiDsZh95vs\n",
              "+yjt5T3k7nkxWcgwYbNknY58A3GTI7rMEAAhd3IrNV7jB2Mhr3y5IINuAIP3SKx64hJ251zZLr/m\n",
              "KLFkum05X9YLR1tGCgJqoyy/0fhKyOXyhqMCZx4O8uClAoGABkEE/fRQT4D5roS296jY7MbdTxxA\n",
              "KTTwhOgrB8CRPLXNeiRzUfRY/M7rXeks7X+xpax9OOcNnAfhIGL7wDFw4TOjLIuUQXdNVtQ5lldm\n",
              "T15MNKAHB8IV6uPHHmO0eYeJAAjvz2l3Wk61RJi14r3rBF1G/PugOOdt9P5IKJnOuQ4=\n",
              "-----END RSA PRIVATE KEY-----\n",
              "EOF\n",
              "chmod 600 /root/.ssh/key.pem\n",

              "CHEF_SERVER=\"", {"Fn::GetAtt": [ "ChefRun", "PrivateIp" ]}, "\"\n",

              "WP_SERVER=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`\n",

              "# Get chef certs\n",
              "scp -o StrictHostKeyChecking=no -i /root/.ssh/key.pem ec2-user@$CHEF_SERVER:/tmp/kmarkley-validator.pem /etc/chef\n",

              "cat > /etc/chef/client.rb << EOF\n",
              "current_dir = File.dirname(__FILE__)\n",
              "log_level       :info\n",
              "log_location     \"/var/log/chef-client.log\"\n",
              "ssl_verify_mode :verify_none\n",
              "node_name \"wordpress\"\n",
              "validation_client_name  'kmarkley-validator'\n",
              "validation_key          \"#{current_dir}/kmarkley-validator.pem\"\n",
              "chef_server_url         \"https://$CHEF_SERVER/organizations/kmarkley\"\n",
              "cookbook_path            [\"/etc/chef/WP_Site/chef/cookbooks\"]\n",
              "EOF\n",

              "# Node attributes to be seeded during first run\n",
              "cat > /etc/chef/roles.json << EOF\n",
              "{\n",
              "   \"run_list\": [\"wordpress-markley\"", "],\n",
              "   \"cloud\": {\n",
              "    \"WPAdmin\": \"", {"Ref" : "WPAdmin"} , "\", \n",
              "    \"WPAdminPass\": \"", {"Ref" : "WPAdminPass"} , "\", \n",
              "    \"WPAdminEmail\": \"", {"Ref" : "WPAdminEmail"} , "\", \n",
              "    \"WPServer\": \"$WP_SERVER\", \n",
              "    \"region_from_template\": \"", {"Ref" : "AWS::Region"} , "\" \n",
              "  } \n",
              "}\n",
              "EOF\n",

              "# Run chef-client to install wordpress\n",
              "cat <<'EOF' >> /root/3-run-chef.sh\n",
              "#!/bin/bash\n",
              "cd /root\n",
              "chef-client -j /etc/chef/roles.json -N wordpress\n",
              "EOF\n",
              "chmod 755 /root/3-run-chef.sh\n",
              "/root/3-run-chef.sh > /var/log/chef-client.log 2>&1 || error_exit 'Failed to initialize wordpress via chef client'\n",

              "/opt/aws/bin/cfn-signal -e $? ",
              "         --stack ", { "Ref" : "AWS::StackName" },
              "         --resource WordpressInstance ",
              "         --region ", { "Ref" : "AWS::Region" }, "\n"
            ]
          ]
        }
      }
    },
    "CreationPolicy": {
      "ResourceSignal": {
        "Timeout": "PT10M"
      }
    }
  }
  },






  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WordpressRun", "PublicIp" ]}]]},
      "Description" : "WordPress website"
    }
  }
}



