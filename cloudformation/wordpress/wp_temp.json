{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Sample Template for WordPress_Chef: WordPress is web software you can use to create a beautiful website or blog. This template installs a highly available, scalable WordPress deployment using a multi-AZ (Availability Zone) Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy the Chef client and using Chef-client in local mode to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an Elastic Load Balancing load balancer, and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "WPAdmin": {
      "Default": "WPAdmin",
      "Description": "The WordPress Admin Name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "WPAdminPass": {
      "Default": "WPpassAD",
      "Description": "The WordPress Admin Password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "WPAdminEmail": {
      "Default": "kevinmarkley@gmail.com",
      "Description": "The WordPress Admin Email",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "WPuser": {
      "Default": "WPuser",
      "Description": "The WordPress Admin Name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "WPuserPass": {
      "Default": "WPuserAD",
      "Description": "The WordPress Admin Name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
      "Default": "kmarkley"
    },
    "InstanceType": {
      "Description": "Web Server EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
    },
    "DBClass": {
      "Description": "Database instance class",
      "Type": "String",
      "Default": "db.t2.small",
      "AllowedValues": [
        "db.t1.micro",
        "db.m1.small",
        "db.m1.medium",
        "db.m1.large",
        "db.m1.xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge",
        "db.m4.10xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge",
        "db.cr1.8xlarge",
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large"
      ],
      "ConstraintDescription": "must select a valid database instance type."
    },
    "DBName": {
      "Default": "wordpressdb",
      "Description": "The WordPress database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUser": {
      "NoEcho": "true",
      "Description": "The WordPress database admin account user name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description": "The WordPress database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "MultiAZDatabase": {
      "Default": "false",
      "Description": "Create a multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "must be either true or false."
    },
    "WebServerCapacity": {
      "Default": "1",
      "Description": "The initial nuber of web server instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription": "must be between 1 and 5 EC2 instances."
    },
    "DBAllocatedStorage": {
      "Default": "5",
      "Description": "The size of the database (GB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 5 and 1024 GB."
    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-c481fad3"
      },
      "us-west-2": {
        "64": "ami-b04e92d0"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.100.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "kmarkley-vpc"
          }
        ]
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.100.0.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "kmarkley-sub"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "kmarkley-gateway"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "kmarkley-route"
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "InboundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "OutBoundHTTPSNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "OutBoundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "SubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "AllowHTTP"
            }
          }
        ]
      }
    },
    "InstanceSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "InstanceSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "InstanceSecurityGroup"
        }
      }
    },
    "ChefRun": {
      "Type": "AWS::AutoScaling::Instance",
      "Metadata": {
        "Comment": "Installing Chef",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "git": [],
                "subversion": []
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": "ami-c481fad3",
        "InstanceType": "t2.small",
        "KeyName": "kmarkley",
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ChefRun ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "mkdir -p /root/chef\n",
                "# Chef install/update.\n",
                "cat <<'EOF' >> /root/chef/1-get_Chef.sh\n",
                "#!/bin/bash\n",
                "CHEF_VERSION=\"12.10.24\"\n",
                "   rpm -e chef && curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=CHEF_VERSION\" -o chef-install && rpm -Uvh chef-install\n",
                "EOF\n",


                " # Go out to Git to pull down repo",
                "cat <<'EOF' >> /root/02-git_setup.sh\n",
                "cd /\n",
                "mkdir -p /etc/chef/\n",
                "cd /etc/chef/\n",
                "git clone https://github.com/kevinmarkley/WP_Site/tree/master/chef/cookbooks",
                "EOF\n",

                "CHEF_SERVER=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`\n",

                "mkdir -p /etc/chef/.chef\n",

                "cat > /root/.chef/knife.rb << EOF\n",
                "current_dir = File.dirname(__FILE__)\n",
                "log_level       :info\n",
                "log_location     \"/var/log/chef-client.log\"\n",
                "ssl_verify_mode :verify_none\n",
                "node_name 'kmarkley'\n",
                "client_key \"/root/kmarkley_chef.pem\"\n",
                "validation_client_name  'kmarkley-validator'\n",
                "validation_key          \"/root/kmarkley-validator.pem\"\n",
                "chef_server_url         \"https://$CHEF_SERVER/organizations/kmarkley\"\n",
                "cache_type 'BasicFile'\n",
                "cache_options( :path => \"#{ENV['HOME']}/.chef/checksums\" )\n",
                "cookbook_path            [\"/cookbooks\"]\n",
                "EOF\n",
                "# Create json file with specific attributes ",
                "cat > /root/chef/attributes/chef_attributes.json << EOF\n",
                "{\n",
                "   \"run_list\": [\"my-wordpress\"",
                "],\n",
                "   \"cloud\": {\n",
                "    \"WPAdmin\": \"",
                {
                  "Ref": "WPAdmin"
                },
                "\", \n",
                "    \"WPAdminPass\": \"",
                {
                  "Ref": "WPAdminPass"
                },
                "\", \n",
                "    \"region_from_template\": \"",
                {
                  "Ref": "AWS::Region"
                },
                "\" \n",
                "  } \n",
                "}\n",
                "EOF\n",
                "# Run chef-solo to install the chef-server\n",
                "cat <<'EOF' >> /root/3-run-chef.sh\n",
                "#!/bin/bash\n",
                "cd /root/chef\n",
                "chef-client -z -j /root/chef/attributes/chef_attributes.json\n",
                "EOF\n",
                " # Run chef-client to install wordpress\n",
                "cat <<'EOF' >> /root/3-run-chef.sh\n",
                "#!/bin/bash\n",
                "cd /root\n",
                "chef-client -j /root/chef/attributes/chef_attributes.json\n",
                "EOF\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ChefRun ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },

    "CreationPolicy" : {
      "ResourceSignal" : {
        "Timeout" : "PT15M"
      }
    }
  },









    "WordpressRun": {
      "Type": "AWS::AutoScaling::Instance",
      "Metadata": {
        "Comment": "Installing Chef",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "git": [],
                "subversion": []
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "InstanceType": "t2.small",
        "KeyName": "kmarkley",
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource WordpressRun ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",

                "# Chef install/update.\n",
                "cat <<'EOF' >> /root/chef-check.sh\n",
                "#!/bin/bash\n",
                "VERSION=\"12.10.24\"\n",
                "if rpm -qa | grep chef | grep $VERSION; then\n",
                "   exit\n",
                "elif rpm -qa | grep chef | grep -v $VERSION; then\n",
                "   rpm -e chef && curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
                "else\n",
                "   curl -L \"http://www.opscode.com/chef/download?p=el&pv=6&m=x86_64&v=$VERSION\" -o chef-install && rpm -Uvh chef-install\n",
                "fi\n",
                "EOF\n",

                "# Clone github repo\n",
                "cat <<'EOF' >> /root/git-setup.sh\n",
                "#!/bin/bash\n",
                "cd /\n",
                "svn export https://github.com/tbojorqu/wordpress/trunk/chef/cookbooks/\n",
                "EOF\n",

                "# Create key file\n",
                "cat > /root/.ssh/key.pem << EOF\n",
                "-----BEGIN RSA PRIVATE KEY-----\n",
                "MIIEpAIBAAKCAQEApVpxyHexrbYcZPSas5UlPN0XQwuR1n59MIjhOTMEPm8CqLDwYxEfwSTHZbtb\n",
                "8q1VGZCJtFA9wLIYcUJdPAZYmQRNhtOFWMnlkXOJvyd6vADFWy9K5nWCReOI/w2ytjh4tFRPxfum\n",
                "gGtRvLNEr9tUl5u5USPiqrIIvmZEwP37rZ7qEt/5BCW0dI1nODtOOr5ynI5KFD4S+9w1A4US13S6\n",
                "W2SspwmNDc8kclFIQmDvpFQL8eV1byQZTW09XO0/ebi//mcelAPgGoP7HMMVQyCmpaBPeTcoSyyu\n",
                "PJOco/lrHTLuFfh9zLzOiWtaHyoMsliYXuPdP0N9OcI4Hm42T8bc/QIDAQABAoIBAQCH9laY/9KZ\n",
                "g6TVXkvWXkzAPwthlaHVPSyzO9n1rn1O2PjWvKbszqfNqPBMNkLkyKGw46hXG6OrTsXKW0dOk+lF\n",
                "6MPWmRaMa3bYoqghBdVlwTyGPdzYosb7sJx1HE5Whxi5LpppsQK3lYcgIkfYUgC8qM84aMl4keue\n",
                "o3jlN/I6T530Maq5Ssi7nq5eClb55WbDPbR3xGysBAMdUhz/S3O02fH5MYdUAnIRKFCda03UX0B3\n",
                "qdaCnOGvDpFJfWeOrG+Zj//HEK528T6RxBHrhjXRybN+4EHwpByWh5F2YEP+iKy8SsXfe6kVOicS\n",
                "bVj6J2dZ9u88qH1xuxZwaNBrFRYBAoGBANzj/TuobvQAGsycOlkHUeEMiXITlStuQCvkXphjryNI\n",
                "OHJ7mSdzoE0w88HZFYeSZUhvoUlCNLCEwUVH/p518fncwhG80KvXnTGUMjBWWPMWWFAF6zhPd4mb\n",
                "ofx52RLoZZDaAV1NER9c52cNq6x+nsmDkogh8uyzuwNFGEcl/5RzAoGBAL+ipmSt2p5fSCSogQKO\n",
                "9O0wYLPfP9aZ2ALh8BUf+B9IUIcAGNTal7SAets17ngvg6SxMPNpzX0ZAznxmAyWOlEMXS1DW/62\n",
                "5LVz4P2hQ5crjx4eEnhqgC14o5oX861+n42NfOS03rjSqCXIbXKPiyGMbZB1+yhrARY9EE47idzP\n",
                "AoGAHyPI9FsXYTCOlp/Dnf9pLJfO3JUkJ15Aj69/Im6TJx8sTf9cpPIo/BjVlFNdNKKPwrlx/Fjo\n",
                "AqaEdJbkr0QjW70iYsvCgyc/Utj4hlX17jcNNiLPeT3CtVSKboRi9MZsYxJItPWDX2+Cc8W6mPO0\n",
                "wOXah3R5waLIz3ozJPyXXj8CgYEAsrd+VEBqtO4JOt7GydsGgjluxfD6+Skqca3CGAFjhdEMAIrP\n",
                "nZpqhpSXft4yEnXFYI87JpbSY8sy3hP4iCyGIFXWg8LhBZANhUeXWRHPFikyZJUJBrHT7hQnBys1\n",
                "PuTq6bk885HWcClNVUcxAvjpeRUcjO/qlgwMzG+QSFVwQbMCgYB3lrxT4Ru6fmjfohTFwym8IvDP\n",
                "VpFqFDbHIIKIf9DtaaDmdzA6WeBbdfH/f9Rp8qbJzcsb0/tz9UprofecetP4cqEz4u80Ts7o63NM\n",
                "ANZvbMcrm7F0ITF/WcgaC/rdqDSUkX4K0iQJpjt+peKZ6mvT0Dv71fnhqKGp69ZU37Zw3Q==\n",
                "-----END RSA PRIVATE KEY-----\n",
                "EOF\n",
                "chmod 600 /root/.ssh/key.pem\n",
                "CHEF_SERVER=\"",
                {
                  "Fn::GetAtt": [
                    "ChefRun",
                    "PrivateIp"
                  ]
                },
                "\"\n",
                "WP_SERVER=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`\n",
                "mkdir -p /etc/chef\n",
                "# Get chef certs\n",
                "scp -o StrictHostKeyChecking=no -i /root/.ssh/key.pem ec2-user@$CHEF_SERVER:/tmp/tbojorquez-validator.pem /etc/chef\n",
                "cat > /etc/chef/client.rb << EOF\n",
                "current_dir = File.dirname(__FILE__)\n",
                "log_level       :info\n",
                "log_location     \"/var/log/chef-client.log\"\n",
                "ssl_verify_mode :verify_none\n",
                "node_name \"wordpress\"\n",
                "validation_client_name  'kmarkley-validator'\n",
                "validation_key          \"#{current_dir}/tbojorquez-validator.pem\"\n",
                "chef_server_url         \"https://$CHEF_SERVER/organizations/tbojorquez\"\n",
                "cookbook_path            [\"/cookbooks\"]\n",
                "EOF\n",
                "# Node attributes to be seeded during first run\n",
                "cat > /etc/chef/roles.json << EOF\n",
                "{\n",
                "  \"run_list\": [\"my-wordpress\"",
                "],\n",
                "  \"cloud\": {\n",
                "    \"chef_server\": \"",
                {
                  "Fn::GetAtt": [
                    "ChefRun",
                    "PrivateIp"
                  ]
                },
                "\", \n",
                "    \"wp_user\": \"",
                {
                  "Ref": "WPUser"
                },
                "\", \n",
                "    \"wp_password\": \"",
                {
                  "Ref": "WPPassword"
                },
                "\", \n",
                "    \"wp_email\": \"",
                {
                  "Ref": "WPEmail"
                },
                "\", \n",
                "    \"wp_server\": \"$WP_SERVER\", \n",
                "    \"region_from_template\": \"",
                {
                  "Ref": "AWS::Region"
                },
                "\" \n",
                "  } \n",
                "}\n",
                "EOF\n",
                "# Run chef-client to install wordpress\n",
                "cat <<'EOF' >> /root/run-chef.sh\n",
                "#!/bin/bash\n",
                "cd /root\n",
                "chef-client -j /etc/chef/roles.json -N wordpress\n",
                "EOF\n",
                "chmod 755 /root/run-chef.sh\n",
                "/root/run-chef.sh > /var/log/chef-client.log 2>&1 || error_exit 'Failed to initialize wordpress via chef client'\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource WordpressInstance ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },



    "Outputs": {
      "WebsiteURL": {
        "Value": {
          "Fn::Join": [
            "",
            [
              "http://",
              {
                "Fn::GetAtt": [
                  "ElasticLoadBalancer",
                  "DNSName"
                ]
              }
            ]
          ]
        },
        "Description": "WordPress website"
      }
    }
  }




